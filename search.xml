<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome to Linfeng&#39;s blog</title>
    <url>/2020/08/10/hello-world/</url>
    <content><![CDATA[<h2 id="二级"><a href="#二级" class="headerlink" title="二级"></a>二级</h2><h3 id="三级"><a href="#三级" class="headerlink" title="三级"></a>三级</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">雨一直下</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://www.baidu.com/">Writing</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端交互的正确打开方式</title>
    <url>/2020/08/10/python/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个前端开发人员，与后台进行数据交互是最基础的技术，也是使用很频繁的技术，交互虽然基础，但并不代表他很简单，在我们的日常工作中往往遇见各种关于交互的技术问题。今天我们就来探索一下我们的前后端交互技术。</p>
<p>关于交互技术的底层技术内容本场 chat 不做过多讲解，主要内容为工作中实际的交互运用。</p>
<h1 id="什么是前后端交互"><a href="#什么是前后端交互" class="headerlink" title="什么是前后端交互"></a>什么是前后端交互</h1><p>我们的开发往往分为前端与后台，前端负责呈现给用户，而后台则负责逻辑处理以及数据的提供。</p>
<p>在以前开发的时候，经常会有前后端不分离的做法，也就是说，前端不用管理数据这块，只需要把界面完成，然后交给后台渲染数据就可以了。但是目前的主流做法都是前后端分离的处理，数据需要前端通过交互技术与后台进行交互。</p>
<h1 id="前面交互技术"><a href="#前面交互技术" class="headerlink" title="前面交互技术"></a>前面交互技术</h1><p>-1.XMLHttpRequest</p>
<p>XMLHttpRequest 对象用于在后台与服务器交换数据，我们的交互都基于它来实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是 XMLHttpRequest 对象？</span><br><span class="line"></span><br><span class="line">XMLHttpRequest 对象用于在后台与服务器交换数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>XMLHttpRequest 对象是开发者的梦想，因为您能够：</p>
<ul>
<li>在不重新加载页面的情况下更新网页</li>
<li>在页面已加载后从服务器请求数据</li>
<li>在页面已加载后从服务器接收数据</li>
<li>在后台向服务器发送数据</li>
<li>所有现代的浏览器都支持 XMLHttpRequest 对象。</li>
</ul>
<p>如何通过 XMLHttpRequest 来实现数据交互？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">   var xmlhttp;</span><br><span class="line">   function loadXMLDoc(url)</span><br><span class="line">   &#123;</span><br><span class="line">   xmlhttp&#x3D;null;</span><br><span class="line">   if (window.XMLHttpRequest)</span><br><span class="line">     &#123;&#x2F;&#x2F; code for all new browsers</span><br><span class="line">     xmlhttp&#x3D;new XMLHttpRequest();</span><br><span class="line">     &#125;</span><br><span class="line">   else if (window.ActiveXObject)</span><br><span class="line">     &#123;&#x2F;&#x2F; code for IE5 and IE6</span><br><span class="line">     xmlhttp&#x3D;new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">   if (xmlhttp!&#x3D;null)</span><br><span class="line">     &#123;</span><br><span class="line">     xmlhttp.onreadystatechange&#x3D;state_Change;</span><br><span class="line">     xmlhttp.open(&quot;GET&quot;,url,true);</span><br><span class="line">     xmlhttp.send(null);</span><br><span class="line">     &#125;</span><br><span class="line">   else</span><br><span class="line">     &#123;</span><br><span class="line">     alert(&quot;Your browser does not support XMLHTTP.&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   function state_Change()</span><br><span class="line">   &#123;</span><br><span class="line">   if (xmlhttp.readyState&#x3D;&#x3D;4)</span><br><span class="line">     &#123;&#x2F;&#x2F; 4 &#x3D; &quot;loaded&quot;</span><br><span class="line">     if (xmlhttp.status&#x3D;&#x3D;200)&#x2F;&#x2F;status 交互返回的状态值：200表示成功</span><br><span class="line">       &#123;&#x2F;&#x2F; 200 &#x3D; OK</span><br><span class="line">       &#x2F;&#x2F; ...our code here...</span><br><span class="line">       &#125;</span><br><span class="line">     else</span><br><span class="line">       &#123;</span><br><span class="line">       alert(&quot;Problem retrieving XML data&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>这是基于原生的 JS 对象 XMLHttpRequest 来实现交互，但是我们日常工作中我们都比较少的使用它来完成工作，而是采用一些基于它已经进行了封装处理的方法来实现。</p>
<p>-2.jQuery AJAX</p>
<p>ajax() 方法是 jQuery 库中封装的一个方法，通过 AJAX 方法传递一些简单的参数就可以实现数据交互。</p>
<p><strong>定义和用法</strong><br>ajax() 方法通过 HTTP 请求加载远程数据。</p>
<p>该方法是 jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get、$.post 等。$.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该函数，除非你需要操作不常用的选项，以获得更多的灵活性。</p>
<p>最简单的情况下，$.ajax() 可以不带任何参数直接使用。</p>
<p>除去 ajax() 方法之外，jQuery 还有常用的 get() 和 post() 方法，更加简单的进行交互。除此之外，jQuery 还提供了许多其他方法供大家使用，更多提供的方法参考 <a href="https://www.runoob.com/">菜鸟教程</a>。<br>-3.其他</p>
<p>对于不同的前端框架而言，很多都有自己的请求方法，如 Vue.js 的 vue resource、axios.js 等，对于这些方法而言，本质都是一样的，对于我们开发而言只是写法上的区别而言。</p>
<p>在每个方法中都会提供不同的 API，如 AJAX 的 get、post 等。</p>
<p>不同的方法可能提供的 API 有些区别，但主要的都是一样的。如 vue resource 提供的七种 API：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get(url, [options])</span><br><span class="line">post(url, [body], [options])</span><br><span class="line">head(url, [options])</span><br><span class="line">delete(url, [options])</span><br><span class="line">JSONP(url, [options])</span><br><span class="line">put(url, [body], [options])</span><br><span class="line">patch(url, [body], [options])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们在日常开发中经常使用的就是 get 与 post 了，除此之外，还有 jsonp 也是经常使用的。使用这些方法的时候都有一个 option，这些 option 中的选项可能在平时使用过程中我们并没有过多的使用，但是大家一定要知道他们是做什么的，当你需要使用的时候才清楚。</p>
<p>如：vue resource options 中各个参数的解析，请见下表。<br>！[images/456]<br>#前端交互常见问题<br>##1.跨域</p>
<p>跨域可以说是每个项目中都会涉及的内容，对于前后端谁来处理跨域问题也没有争论的必要，作为一个前端，自己能解决跨域挺好的。</p>
<p>关于跨域的解决方案，网上一搜能受到太多，但是很多方案其实都已经不是很适用了。日常可能就 JSONP 比较使用广大需求。而很多框架的交互里面也提供了 JSONP 的 API。</p>
<p>下面举个 AJAX 的 JSONP 栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">                async : true,</span><br><span class="line">                url : &quot;https:&#x2F;&#x2F;api.douban.com&#x2F;v2&#x2F;book&#x2F;search&quot;,</span><br><span class="line">                type : &quot;GET&quot;,</span><br><span class="line">                dataType : &quot;jsonp&quot;, &#x2F;&#x2F; 返回的数据类型，设置为JSONP方式</span><br><span class="line">                jsonp : &#39;callback&#39;, &#x2F;&#x2F;指定一个查询参数名称来覆盖默认的 jsonp 回调参数名 callback</span><br><span class="line">                jsonpCallback: &#39;handleResponse&#39;, &#x2F;&#x2F;设置回调函数名</span><br><span class="line">                data : &#123;</span><br><span class="line">                    q : &quot;javascript&quot;, </span><br><span class="line">                    count : 1</span><br><span class="line">                &#125;, </span><br><span class="line">                success: function(response, status, xhr)&#123;</span><br><span class="line">                    console.log(&#39;状态为：&#39; + status + &#39;,状态是：&#39; + xhr.statusText);</span><br><span class="line">                    console.log(response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<p>##2.http header<br>在有的时候，后台会让你在 header 中进行设置，所以我们要了解http header。</p>
<p><code>Content-Type</code></p>
<p>这是最常见的设置，指定请求和响应的内容类型，如果未指定即为text/html。常见设置的选择如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text&#x2F;plain：普通文本</span><br><span class="line">tex&#x2F;html：html 文本</span><br><span class="line">application&#x2F;x-javascript：js</span><br><span class="line">application&#x2F;x-www-form-urlencoded：默认形式表单发包类型</span><br><span class="line">multipart&#x2F;form-data：用在发送文件的 post 包中</span><br><span class="line">application&#x2F;json：通过 json 传输</span><br><span class="line">application&#x2F;xml：通过 xml 传输</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>##3.数据类型<br>我们在交互的时候都是期望后台返回我们需要的数据格式，而我们能有哪些选择呢？以 AJAX 为例：</p>
<p>如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;xml&quot;: 返回 XML 文档，可用 jQuery 处理。</span><br><span class="line">&quot;html&quot;: 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。</span><br><span class="line">&quot;script&quot;: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 &quot;cache&quot; 参数。注意：在远程请求时- (不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）</span><br><span class="line">&quot;json&quot;: 返回 JSON 数据 。</span><br><span class="line">&quot;JSONP&quot;: JSONP 格式。使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</span><br><span class="line">&quot;text&quot;: 返回纯文本字符串</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>##4.状态码</p>
<p>在与后台交互过程中，我们往往需要根据状态码来进行一些判断，所以对于常见的状态码大家也应该清楚。</p>
<p>状态码分为 1-6 开头的内容，1 开头表示已经被接收了，2 开头表示请求成功了，3 开头表示重定向，4 开头表示请求错误，5-6 开头表示服务器错误。</p>
<p>我们日常见得最多得可能就是 200、404、500、502、504 这些了，下面给大家列举常见的状态码和对应的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">状态码    内容</span><br><span class="line">100 Continue            初始的请求已经接受，客户应当继续发送请求的其余部分</span><br><span class="line">101 Switching Protocols    服务器将遵从客户的请求转换到另外一种协议</span><br><span class="line">200 OK                    一切正常，对GET和POST请求的应答文档跟在后面</span><br><span class="line">201 Created                已经接受请求，但处理尚未完成。</span><br><span class="line">202 Accepted            初始的请求已经接受，客户应当继续发送请求的其余部分</span><br><span class="line">203 Non-Authoritative Information    文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝</span><br><span class="line">204 No Content                       没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的</span><br><span class="line">205 Reset Content        没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容</span><br><span class="line">206 Partial Content        客户发送了一个带有Range头的GET请求，服务器完成了它</span><br><span class="line">300 Multiple Choices    客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</span><br><span class="line">301 Moved Permanently    客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</span><br><span class="line">302 Found                类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。</span><br><span class="line">303 See Other            类似于301&#x2F;302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取</span><br><span class="line">304 Not Modified        客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。  服务器告诉客户，原来缓冲的文档还可以继续使用。</span><br><span class="line">305 Use Proxy             客户请求的文档应该通过Location头所指明的代理服务器提取</span><br><span class="line">307 Temporary Redirect    和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是 POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码： 当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向。</span><br><span class="line">400 Bad Request    请求出现语法错误。</span><br><span class="line">401 Unauthorized    客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字&#x2F;密码对话框，然后在填写合适的Authorization头后再次发出请求。</span><br><span class="line">403 Forbidden            资源不可用。</span><br><span class="line">404 Not Found            无法找到指定位置的资源</span><br><span class="line">405 Method Not Allowed    请求方法（GET、POST、HEAD、Delete、PUT、TRACE等）对指定的资源不适用。</span><br><span class="line">406 Not Acceptable         指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容</span><br><span class="line">407 Proxy Authentication Required    类似于401，表示客户必须先经过代理服务器的授权。</span><br><span class="line">408 Request Timeout         在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。</span><br><span class="line">409 Conflict             通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。</span><br><span class="line">410 Gone                 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用。</span><br><span class="line">411 Length Required         服务器不能处理请求，除非客户发送一个Content-Length头。</span><br><span class="line">412 Precondition Failed     请求头中指定的一些前提条件失败</span><br><span class="line">413 Request Entity Too Large    目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头</span><br><span class="line">414 Request URI Too Long    URI太长</span><br><span class="line">416 Requested Range Not Satisfiable    服务器不能满足客户在请求中指定的Range头</span><br><span class="line">500 Internal Server Error            服务器遇到了意料不到的情况，不能完成客户的请求</span><br><span class="line">501 Not Implemented                   服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</span><br><span class="line">502 Bad Gateway                 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</span><br><span class="line">503 Service Unavailable     服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。                    服务器返回503时可以提供一个Retry-After头</span><br><span class="line">504 Gateway Timeout         由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</span><br><span class="line">505 HTTP Version Not Supported    服务器不支持请求中所指明的HTTP版本</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>文章来自引用</p>
</blockquote>
]]></content>
      <categories>
        <category>服务端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
